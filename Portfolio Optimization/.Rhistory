# install.packages("Rglpk")
# install.packages("ROI.plugin.Rglpk")
# install.packages('webshot')
# install.packages('highcharter')
# install.packages('widgetframe')
#install.packages("quadprog")
#install.packages("shinydashboard")
library(Rglpk)
library(ROI.plugin.glpk)
library(ROI)
library(ROI.plugin.quadprog)
library(tidyverse)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(timetk)
library(tibbletime)
library(xts)
library(zoo)
library(tidyquant)
library(glue)
library(quadprog)
library(rlang)
library(webshot)
library(knitr)
library(purrr)
library(highcharter)
library(widgetframe)
symbols <- c("^GSPC")
spx <- getSymbols(
Symbols = symbols,
src = 'yahoo',
auto.assign = TRUE,
warnings = FALSE
) |>
# get() unpacks our financial price data (Open, High, Low, Close, Volume, Adjusted). Ad returns ONLY the daily adjusted price (accounts for any dividends paid, corporate actions, or adjustments that would effect the price of the stock. Map returns each individual stock data into a list.
map(.f = ~Ad(get(x = .))) |>
#reduce applies a function to each element of the list?
reduce(.f = merge) |>
# I needed to set the ticker symbol to the name of the columns. I found this nifty way of doing it since colnames(x=prices) <- value didn't work and I don't know why. Apparently this is prefix form. (Ex. AAPL.Adjusted is now AAPL)
`colnames<-` (value=symbols)
spx
spx_monthly_adjusted_returns <- to.monthly(
x = spx,
drop.time = TRUE,
indexAt  = 'lastof',
OHLC = FALSE
) |>
Return.calculate(
method = 'discrete') |>
na.omit()
spx_monthly_adjusted_returns
symbols <- c('IXC', 'IXG', 'IXN', 'IXJ', 'IXP','RXI','EXI','MXI','KXI','JXI')
#I'm using getSymbols from quantmod library because it returns a time series object in xts form.
prices <- getSymbols(
Symbols = symbols,
src = 'yahoo',
auto.assign = TRUE,
warnings = FALSE
) |>
# get() unpacks our financial price data (Open, High, Low, Close, Volume, Adjusted). Ad returns ONLY the daily adjusted price (accounts for any dividends paid, corporate actions, or adjustments that would effect the price of the stock. Map returns each individual stock data into a list.
map(.f = ~Ad(get(x = .))) |>
#reduce applies a function to each element of the list?
reduce(.f = merge) |>
# I needed to set the ticker symbol to the name of the columns. I found this nifty way of doing it since colnames(x=prices) <- value didn't work and I don't know why. Apparently this is prefix form. (Ex. AAPL.Adjusted is now AAPL)
`colnames<-` (value=symbols)
prices
monthly_adjusted_log_returns <- to.monthly(
x = prices,
drop.time = TRUE,
indexAt  = 'lastof',
OHLC = FALSE
) |>
#compute our log returns
Return.calculate(
method = 'log') |>
na.omit()
monthly_adjusted_log_returns
max(apply.yearly(monthly_adjusted_log_returns, Return.cumulative))
#line charts of monthly log returns
highchart(type = 'stock') |>
#   # Add chart main title
hc_title(text = "Monthly Log Returns") |>
hc_add_series(
data = monthly_adjusted_log_returns[ , symbols[[1]]],
name = symbols[[1]]
) |>
hc_add_series(
data = monthly_adjusted_log_returns[, symbols[[4]]],
name = symbols[[4]]
) |>
hc_add_series(
data = monthly_adjusted_log_returns[, symbols[[3]]],
name = symbols[[3]]
) |>
hc_add_theme(hc_thm = hc_theme_economist()) |>
hc_exporting(enabled = TRUE) |>
hc_legend(enabled = TRUE)
monthly_adjusted_log_returns_tibble <- monthly_adjusted_log_returns |>
tk_tbl() |>
rename(date = index) |>
pivot_longer(
-date,
names_to = 'Asset',
values_to = 'Log_Returns'
)
monthly_adjusted_log_returns_tibble
# Compute Freedman-Diaconis bin numbers
bins_fd <- function(vec) {
ceiling(diff(range(vec)) / (2 * IQR(vec) / length(vec)^(1 / 3)))
}
# Histogram
ggplot(monthly_adjusted_log_returns_tibble, mapping = aes(x = Log_Returns)) +
geom_histogram(
alpha = 0.5,
mapping = aes(fill = Asset),
bins = bins_fd(monthly_adjusted_log_returns_tibble[["Log_Returns"]])
) +
facet_wrap(~Asset) +
ggtitle("Distributions of Monthly Log Returns") +
theme_minimal()
# # Density plot
ggplot(data = monthly_adjusted_log_returns_tibble, mapping = aes(x = Log_Returns)) +
geom_density(mapping = aes(color = Asset)) +
ggtitle("Distributions of Monthly Log Returns") +
theme(
panel.background = element_rect(fill = "grey97"),
panel.grid = element_blank()
)
ggplot(data = monthly_adjusted_log_returns_tibble, mapping = aes(x = Log_Returns)) +
geom_density(mapping = aes(color = Asset)) +
geom_histogram(
alpha = 0.5,
mapping = aes(fill = Asset),
bins = bins_fd(monthly_adjusted_log_returns_tibble[["Log_Returns"]])
) +
facet_wrap(~Asset) +
ggtitle("Distributions of Monthly Log Returns") +
theme(
panel.background = element_rect(fill = "grey97"),
panel.grid = element_blank(),
)
# Keep only the last adjusted price of each month because we are focused on a long-term investment horizon, plus daily price flucuations cause too much noise can make it harder to identify long term trends.
# to.monthly() function is apart of xts library and is used to convert daily price data to monthly. We have set the adjusted close price to the last of each month, dropped the time, and set OHLC = False which means no "OPEN, HIGH, LOW, CLOSE" values.
monthly_adjusted_returns <- to.monthly(
x = prices,
drop.time = TRUE,
indexAt = 'lastof',
OHLC = FALSE
) |>
#We calculating simple returns  with the return.calculate function from PerformanceAnalytics library
Return.calculate(method = 'discrete') |>
na.omit()
head(monthly_adjusted_returns)
#Creates a portfolio object using portfolio.spec function, which is a function from of PortfolioAnalytics
# returns a list.
Minimum_Variance_Portfolio <- portfolio.spec(assets = symbols)
Minimum_Variance_Portfolio
# Add Full Investment Constraint (weight sum constraint - weights must sum to 1 - prevents overleveraging and ensures diversification)
Minimum_Variance_Portfolio <- add.constraint(
portfolio = Minimum_Variance_Portfolio,
type = 'weight_sum',
min_sum = 0.99,
max_sum = 1.01,
enabled = TRUE
)
Minimum_Variance_Portfolio
# Add Box Constraint(weights have minimum and maximum values - limits the range of weights in the portfolio. Limits over/under leveraging for assets. Promotes diversification)
Minimum_Variance_Portfolio <- add.constraint(
portfolio = Minimum_Variance_Portfolio,
type = 'box',
min = 0,
max = 1
)
Minimum_Variance_Portfolio
# Add Objective to minimize risk (we are creating a minimization portfolio)
Minimum_Variance_Portfolio <- add.objective(
portfolio = Minimum_Variance_Portfolio,
type = 'risk',
name = 'var'
)
Minimum_Variance_Portfolio
Minimum_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'quadprog',
trace = TRUE
)
Minimum_Variance_Portfolio
main_variance_portfolio_weights <- pluck(Minimum_Variance_Portfolio, 'weights')
main_variance_portfolio_weights
monthly_StdDev <- (Main_Variance_Portfolio$objective_measures$StdDev)
annualized_StdDev <- (Main_Variance_Portfolio$objective_measures$StdDev*sqrt(12))
glue("Your Monthly Standard Deviation is {monthly_StdDev}")
glue("Your Annualized Standard Deviation is {annualized_StdDev}")
Minimized_Portfolio_Returns <- Return.portfolio(
R = monthly_adjusted_returns,
weights = main_variance_portfolio_weights,
#aggregate monthly
rebalance_on = "months",
geometric = FALSE
) |>
`colnames<-`("Monthly_portfolio_returns")
Minimized_Portfolio_Returns
start_balance
end_balance <- start_balance * prod(1+Minimized_Portfolio_Returns)
end_balance
CAGR <- (end_balance/start_balance)^(12/nrow(Minimized_Portfolio_Returns)) -1
CAGR
expected_return <- mean(Minimized_Portfolio_Returns)
expected_return
start_balance <- 5000
start_balance
end_balance <- start_balance * prod(1+Minimized_Portfolio_Returns)
end_balance
CAGR <- (end_balance/start_balance)^(12/nrow(Minimized_Portfolio_Returns)) -1
CAGR
expected_return <- mean(Minimized_Portfolio_Returns)
expected_return
standard_deviation <- sd(Minimized_Portfolio_Returns)
standard_deviation
best_year <- max(apply.yearly(Minimized_Portfolio_Returns, Return.cumulative))
best_year
worst_year <- min(apply.yearly(Minimized_Portfolio_Returns, Return.cumulative))
worst_year
max_drawdown <- maxDrawdown(Minimized_Portfolio_Returns)
max_drawdown
sharpe_ratio <- SharpeRatio(Minimized_Portfolio_Returns, Rf = 0.05)
sharpe_ratio
sortino_ratio <- SortinoRatio(Minimized_Portfolio_Returns)
sortino_ratio
market_correlation <- cor(Minimized_Portfolio_Returns, spx_monthly_adjusted_returns)
market_correlation
cor(Minimized_Portfolio_Returns, spx_monthly_adjusted_returns)
#Creates a portfolio object using portfolio.spec function, which is a function from of PortfolioAnalytics
# returns a list.
maximum_expected_return_portfolio <- portfolio.spec(
assets = symbols
)
maximum_expected_return_portfolio
# Add weight_sum Constraint (weight sum constraint)
maximum_expected_return_portfolio <- add.constraint(
portfolio = maximum_expected_return_portfolio,
# similar to full_investment, expect you can modify the parameters for 'min_sum' and 'max_sum' to ease up constraints for calculating maximal returns
type = 'weight_sum',
min_sum = 0.99,
max_sum = 1.01,
enabled = TRUE
)
maximum_expected_return_portfolio
# Adding box constraint
maximum_expected_return_portfolio <- add.constraint(
portfolio = maximum_expected_return_portfolio,
type = 'box',
min = 0.1,
max = 0.6
)
maximum_expected_return_portfolio
# Add objective function - we are implementing a linear function to calculate the maximal expected returns
maximum_expected_return_portfolio <- add.objective(
portfolio = maximum_expected_return_portfolio,
type = 'return',
# name of function used to calculate the returns (we're just naming the type = 'return' parameter.:
name = 'mean'
)
maximum_expected_return_portfolio
# Optimize the portfolio
main_expected_return_portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = maximum_expected_return_portfolio,
# used for linear functions with linear constraints
optimize_method = "Rglpk",
trace = TRUE
)
main_expected_return_portfolio
main_expected_return_portfolio_weights <- pluck(main_expected_return_portfolio,
'weights'
)
main_expected_return_portfolio_weights
#average annual return you can expect to earn.
monthly_Return <- (main_expected_return_portfolio$objective_measures$mean)
annualized_Return <- (1+main_expected_return_portfolio$objective_measures$mean)^12-1
glue("Your maximal expected monthly return is {monthly_Return}")
glue("Your maximal annualized expected return is {annualized_Return}")
# We are using the Return.portfolio() function from Performance Analytics to calculate the percentage returns per month. It's based on the weights for the asset and the assets return that month.
portfolio <- Return.portfolio(
R = monthly_adjusted_returns,
weights = main_expected_return_portfolio_weights,
#aggregate monthly
rebalance_on = "months",
geometric = FALSE
) |>
`colnames<-`("Monthly_portfolio_returns")
cor(portfolio, spx_monthly_adjusted_returns)
tangent_portfolio <- portfolio.spec(assets = symbols)
tangent_portfolio
tangent_portfolio <- add.constraint(
portfolio = tangent_portfolio,
type = "weight_sum",
min = 0.99,
max = 1.01
)
tangent_portfolio <- add.constraint(
portfolio = tangent_portfolio,
type = "box",
min = 0,
max = 1
)
tangent_portfolio <- add.objective(
portfolio = tangent_portfolio,
type = 'risk_adjusted_return',
name = 'SharpeRatio',
risk_free_rate = 0.005
)
main_tangent_portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = tangent_portfolio,
optimize_method = "ROI",
trace = TRUE
)
main_tangent_portfolio
Optimal_Return_monthly <- (main_tangent_portfolio$objective_measures$mean)
annualized_Return_monthly <- (1+main_tangent_portfolio$objective_measures$mean)^12-1
glue("Your optimal return monthly return is {monthly_Return}")
glue("Your optimal annualized return is {annualized_Return}")
main_tangent_portfolio_weights <- pluck(main_tangent_portfolio,
'weights'
)
main_tangent_portfolio_weights
tangent_portfolio_return <- Return.portfolio(
R = monthly_adjusted_returns,
weights = main_tangent_portfolio_weights,
#aggregate monthly
rebalance_on = "months",
geometric = FALSE
) |>
`colnames<-`("Monthly_portfolio_returns")
tangent_portfolio_return
data.frame(
date = index(monthly_adjusted_returns),
value = cumprod(1+tangent_portfolio_return)
)
data.frame(
value = cumprod(1+tangent_portfolio_return)
)
data.frame(
date = index(monthly_adjusted_returns),
value = cumprod(1+tangent_portfolio_return)
)
View(spx_returns_tibble)
?hc_xAxis
data <- data.frame(
date = index(monthly_adjusted_returns),
value = cumprod(1+tangent_portfolio_return)
)
highchart() |>
hc_chart(type = 'line') |>
hc_title(text  = 'Portfolio Growth') |>
hc_xAxis(categories = data$date,
title = list(text = 'Year')) |>
hc_yAxis(title = list(text = 'Dollar Amount')) |>
hc_add_series(name = 'Portfolio Value', data = data$value)
monthly_adjusted_returns
tangent_portfolio_return
monthly_adjusted_returns
index(monthly_adjusted_returns)
cumprod(1+tangent_portfolio_return)
tangent_portfolio_return
monthly_adjusted_log_returns[ , symbols[[1]]]
monthly_adjusted_log_returns
monthly_adjusted_log_returns[1]
monthly_adjusted_log_returns[, symbols[1]]
highchart(type = 'stock') |>
#   # Add chart main title
hc_title(text = "Monthly Log Returns") |>
hc_add_series(
data = monthly_adjusted_log_returns[ , symbols[[1]]],
name = symbols[[1]]
) |>
hc_add_series(
data = monthly_adjusted_log_returns[, symbols[[4]]],
name = symbols[[4]]
) |>
hc_add_series(
data = monthly_adjusted_log_returns[, symbols[[3]]],
name = symbols[[3]]
) |>
hc_add_theme(hc_thm = hc_theme_economist()) |>
hc_exporting(enabled = TRUE) |>
hc_legend(enabled = TRUE)
data <- data.frame(
date = index(monthly_adjusted_returns),
value = cumprod(1+tangent_portfolio_return)
)
highchart(type = 'stock') |>
hc_title(text  = 'Portfolio Growth') |>
hc_add_series(
name = 'Portfolio Value', data = data$value)
data <- data.frame(
date = index(monthly_adjusted_returns),
value = cumprod(1+tangent_portfolio_return)
)
highchart(type = 'stock') |>
hc_title(text  = 'Portfolio Growth') |>
hc_add_series(
name = 'Portfolio Value', data = tangent_portfolio_return)
data <- data.frame(
date = index(monthly_adjusted_returns),
value = cumprod(1+tangent_portfolio_return)
)
highchart(type = 'stock') |>
hc_title(text  = 'Portfolio Growth') |>
hc_add_series(
name = 'Portfolio Value', data = tangent_portfolio_return
) |>
hc_add_theme(hc_thm = hc_theme_economist()) |>
hc_exporting(enabled = TRUE) |>
hc_legend(enabled = TRUE)
data <- tibble(
date = index(monthly_adjusted_returns),
value = cumprod(1+tangent_portfolio_return)
)
data <- tibble(
date = index(monthly_adjusted_returns),
value = cumprod(1+tangent_portfolio_return)
)
data
data <- tibble(
date = index(monthly_adjusted_returns),
value = cumprod(1+tangent_portfolio_return)
)
data
data <- data.frame(
date = index(monthly_adjusted_returns),
value = cumprod(1+tangent_portfolio_return)
)
data
hchart(data, type = "line", hcaes(x = date, y = value, group = 1)) %>%
hc_title(text = "Financial Data Over Time") %>%
hc_yAxis(title = list(text = "Dollar Amount")
hchart(data, type = "line", hcaes(x = date, y = value, group = 1)) %>%
hc_title(text = "Financial Data Over Time") %>%
hc_yAxis(title = list(text = "Dollar Amount"))
hchart(data, type = "line", hcaes(x = data$date, y = data$value, group = 1)) %>%
hc_title(text = "Financial Data Over Time") %>%
hc_yAxis(title = list(text = "Dollar Amount"))
data <- data.frame(
date = as.Date(c("2023-01-01", "2023-02-01", "2023-03-01")),
value = c(100, 200, 150)
)
hchart(data, type = "line", hcaes(x = data$date, y = data$value, group = 1)) %>%
hc_title(text = "Financial Data Over Time") %>%
hc_yAxis(title = list(text = "Dollar Amount"))
index(tangent_portfolio_return)
data <- data.frame(
date = as.Date(c(index(tangent_portfolio_return))),
value = c(100, 200, 150)
)
data <- data.frame(
date = as.Date(c(index(tangent_portfolio_return))),
value = c(tangent_portfolio_return)
)
data <- data.frame(
date = as.Date(c(index(tangent_portfolio_return))),
value = c(tangent_portfolio_return)
)
data
data <- data.frame(
date = as.Date(c(index(tangent_portfolio_return))),
value = c(cumprod(1+tangent_portfolio_return))
)
data
data <- data.frame(
date = as.Date(c(index(tangent_portfolio_return))),
value = c(prod(1+tangent_portfolio_return))
)
data
data <- data.frame(
date = as.Date(c(index(tangent_portfolio_return))),
value = c(cumprod(1+tangent_portfolio_return))
)
data
data <- tibble(
mutate(date = as.Date(c(index(tangent_portfolio_return))),
value = c(cumprod(1+tangent_portfolio_return))
))
data <- data.frame(
date = as.Date(c(index(tangent_portfolio_return))),
value = c(cumprod(1+tangent_portfolio_return)
)
data
data <- data.frame(
date = as.Date(c(index(tangent_portfolio_return))),
value = c(cumprod(1+tangent_portfolio_return)
)
data
data <- data.frame(
date = as.Date(c(index(tangent_portfolio_return))),
value = c(cumprod(1+tangent_portfolio_return)
))
data
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
