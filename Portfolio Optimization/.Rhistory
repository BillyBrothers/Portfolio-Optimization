# Add Objective to minimize risk (we are creating a minimization portfolio)
Minimum_Variance_Portfolio <- add.objective(
portfolio = Minimum_Variance_Portfolio,
type = 'risk',
name = 'var'
)
Minimum_Variance_Portfolio
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'Quadprog',
trace = TRUE
)
Main_Variance_Portfolio
str(Main_Variance_Portfolio)
Main_Variance_Portfolio$weight_seq
Main_Variance_Portfolio$name
Main_Variance_Portfolio$hi
Main_Variance_Portfolio$okayyy
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'Quadprog',
trace = TRUE
)
print(Main_Variance_Portfolio)
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'Quadprog',
trace = TRUE
)
optimal_weights <- extractWeights(Main_Variance_Portfolio)
print(optimal_weights)
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'ROI',
trace = TRUE
)
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'Roi',
trace = TRUE
)
Main_Variance_Portfolio
str(Main_Variance_Portfolio)
Main_Variance_Portfolio$optim
Main_Variance_Portfolio$
Main_Variance_Portfolio$objective_measures
# Create a vector of ticker symbols
symbols <- c("SPY", "EFA", "IJS", "EEM", "AGG")
# Load data from 2012 to today
# Specify the "to = " argument to specify an end date
prices <- getSymbols(
Symbols = symbols,
src = "yahoo",
from = "2012-12-31",
auto.assign = TRUE,
warnings = FALSE
) %>%
# The map function takes an anonymous function and will return a list of five
# The function Ad() extracts the daily adjusted price series
map(.f = ~ Ad(get(x = .x))) %>%
# Use reduce() to merge the elements of .x interactively
reduce(.f = merge) %>%
# Use a replacement function to set column names to ticker symbols
# This function is in prefix form
# It is equivalent to colnames(x = prices) <- value
`colnames<-`(value = symbols)
# Keep only the last reading of each month
# We could have chosen to keep only the first reading of each month
asset_returns_xts <- to.monthly(
x = prices,
drop.time = TRUE,
indexAt = "lastof",
OHLC = FALSE
) |>
# Compute simple returns
# Log returns are time-additive but not portfolio additive
Return.calculate(method = "discrete") |>
# Drop the first row since we lose 12/31/2012
na.omit()
# Keep only the xts returns, ticker symbols, and the prices series
rm(list = setdiff(x = ls(), y = c("symbols", "prices", "asset_returns_xts")))
min_var_portfolio <- portfolio.spec(assets = symbols)
typeof(min_var_portfolio)
min_var_portfolio <- add.constraint(
portfolio = min_var_portfolio,
type = "full_investment"
)
# Examine the constraint element by extracting min_var_portfolio[["constraints"]][[1]]
str(pluck(.x = min_var_portfolio, "constraints", 1))
min_var_portfolio <- add.constraint(
portfolio = min_var_portfolio,
type = "box", min = 0.05, max = 0.6
)
# Examine the constraint element by extracting min_var_portfolio[["constraints"]][[2]]
str(pluck(.x = min_var_portfolio, "constraints", 2))
min_var_portfolio <- add.objective(
portfolio = min_var_portfolio,
# Minimize risk
type = "risk",
# A character corresponding to a function name, var()
name = "var"
)
global_min_portfolio <- optimize.portfolio(
R = asset_returns_xts,
portfolio = min_var_portfolio,
# This defaults to the "quadprog" solver
optimize_method = "quadprog",
# Return additional information on the path or portfolios searched
trace = TRUE
)
global_min_portfolio <- optimize.portfolio(
R = asset_returns_xts,
portfolio = min_var_portfolio,
# This defaults to the "quadprog" solver
optimize_method = "Quadprog",
# Return additional information on the path or portfolios searched
trace = TRUE
)
# Examine returned portfolio list object
global_min_portfolio
extractWeights(global_min_portfolio)
global_min_portfolio$weights
global_min_portfolio <- optimize.portfolio(
R = asset_returns_xts,
portfolio = min_var_portfolio,
# This defaults to the "quadprog" solver
optimize_method = "ROI",
# Return additional information on the path or portfolios searched
trace = TRUE
)
library(tidyverse)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(timetk)
library(tibbletime)
library(xts)
library(zoo)
library(tidyquant)
install.packages("quadprog")
library(quadprog
install.packages("quadprog")
library(tidyverse)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(timetk)
library(tibbletime)
library(xts)
library(zoo)
library(tidyquant)
#install.packages("quadprog")
library(quadprog)
library(tidyverse)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(timetk)
library(tibbletime)
library(xts)
library(zoo)
library(tidyquant)
#install.packages("quadprog")
library(quadprog)
symbols <- c("AAPL", "PFE", "JPM", "XOM", "AMT", "KO", "TGT", "BA", "NEM", "EXC", "DIS")
#I'm using getSymbols from quantmod library because it returns a time series object in xts form.
prices <- getSymbols(
Symbols = symbols,
src = 'yahoo',
auto.assign = TRUE,
warnings = FALSE
) |>
# get unpacks our financial price data (Open, High, Low, Close, Volume, Adjusted). Ad returns ONLY the daily adjusted price (accounts for any dividends paid, corporate actions, or adjustments that would affect the price of the stock. Map returns each individual stock data into a list.
map(.f = ~Ad(get(x = .))) |>
#reduce applies a function to each element of the list?
reduce(.f = merge) |>
# I needed to set the ticker symbol to the name of the columns. I found this nifty way of doing it since colnames(x=prices) <- value didn't work and I don't know why. Apparently this is prefix form. (Ex. AAPL.Adjusted is now AAPL)
`colnames<-` (value=symbols)
# Keep only the last adjusted price of each month because we are focused on a long-term investment horizon, plus daily price flucuations cause too much noise and make it harder to identify long term trends.
# to.monthly() function is apart of xts library and is used to convert daily price data to monthly. We have set the adjusted close price to the last of each month, dropped the time, and set OHLC = False which means no "OPEN, HIGH, LOW, CLOSE" values.
monthly_adjusted_returns <- to.monthly(
x = prices,
drop.time = TRUE,
indexAt = 'lastof',
OHLC = FALSE
) |>
#We calculating simple returns  with the return.calculate function from PerformanceAnalytics library
Return.calculate(method = 'discrete') |>
na.omit()
monthly_adjusted_returns
#Creates a portfolio object using portfolio.spec function, which is a function from of PortfolioAnalytics
# returns a list.
Minimum_Variance_Portfolio <- portfolio.spec(assets = symbols)
Minimum_Variance_Portfolio
# Add Full Investment Constraint (weight sum constraint - weights must sum to 1)
Minimum_Variance_Portfolio <- add.constraint(
portfolio = Minimum_Variance_Portfolio,
type = 'full_investment'
)
Minimum_Variance_Portfolio
# Add Box Constraint(weights have minimum and maximum values)
Minimum_Variance_Portfolio <- add.constraint(
portfolio = Minimum_Variance_Portfolio,
type = 'box',
min = 0.05,
max = .6
)
Minimum_Variance_Portfolio
# Add Objective to minimize risk (we are creating a minimization portfolio)
Minimum_Variance_Portfolio <- add.objective(
portfolio = Minimum_Variance_Portfolio,
type = 'risk',
name = 'var'
)
Minimum_Variance_Portfolio
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'Quadprog',
trace = TRUE
)
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'Quadprog',
trace = TRUE
)
Main_Variance_Portfolio
extractWeights(Main_Variance_Portfolio)
Main_Variance_Portfolio$weights
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'quadprog',
trace = TRUE
)
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'ROI',
solver = 'quadprog',
trace = TRUE
)
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'ROI',
solver = 'Quadprog',
trace = TRUE
)
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
solver = 'Quadprog',
trace = TRUE
)
global_min_portfolio <- optimize.portfolio(
R = asset_returns_xts,
portfolio = min_var_portfolio,
# This defaults to the "quadprog" solver
optimize_method = "ROI",
solver = 'Quadprog'
# Return additional information on the path or portfolios searched
trace = TRUE
global_min_portfolio <- optimize.portfolio(
R = asset_returns_xts,
portfolio = min_var_portfolio,
# This defaults to the "quadprog" solver
optimize_method = "ROI",
solver = 'Quadprog',
# Return additional information on the path or portfolios searched
trace = TRUE
)
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'ROI',
solver = 'quadprog',
trace = TRUE
)
install.packages("ROI")
install.packages("ROI.plugin.quadprog")
install.packages("ROI")
library(ROI)
library(ROI.plugin.quadprog
library(tidyverse)
# install.packages("ROI")
# install.packages("ROI.plugin.quadprog")
library(ROI)
library(ROI.plugin.quadprog)
library(tidyverse)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(timetk)
library(tibbletime)
library(xts)
library(zoo)
library(tidyquant)
#install.packages("quadprog")
library(quadprog)
# install.packages("ROI")
# install.packages("ROI.plugin.quadprog")
library(ROI)
library(ROI.plugin.quadprog)
library(tidyverse)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(timetk)
library(tibbletime)
library(xts)
library(zoo)
library(tidyquant)
#install.packages("quadprog")
library(quadprog)
symbols <- c("AAPL", "PFE", "JPM", "XOM", "AMT", "KO", "TGT", "BA", "NEM", "EXC", "DIS")
#I'm using getSymbols from quantmod library because it returns a time series object in xts form.
prices <- getSymbols(
Symbols = symbols,
src = 'yahoo',
auto.assign = TRUE,
warnings = FALSE
) |>
# get unpacks our financial price data (Open, High, Low, Close, Volume, Adjusted). Ad returns ONLY the daily adjusted price (accounts for any dividends paid, corporate actions, or adjustments that would affect the price of the stock. Map returns each individual stock data into a list.
map(.f = ~Ad(get(x = .))) |>
#reduce applies a function to each element of the list?
reduce(.f = merge) |>
# I needed to set the ticker symbol to the name of the columns. I found this nifty way of doing it since colnames(x=prices) <- value didn't work and I don't know why. Apparently this is prefix form. (Ex. AAPL.Adjusted is now AAPL)
`colnames<-` (value=symbols)
# Keep only the last adjusted price of each month because we are focused on a long-term investment horizon, plus daily price flucuations cause too much noise and make it harder to identify long term trends.
# to.monthly() function is apart of xts library and is used to convert daily price data to monthly. We have set the adjusted close price to the last of each month, dropped the time, and set OHLC = False which means no "OPEN, HIGH, LOW, CLOSE" values.
monthly_adjusted_returns <- to.monthly(
x = prices,
drop.time = TRUE,
indexAt = 'lastof',
OHLC = FALSE
) |>
#We calculating simple returns  with the return.calculate function from PerformanceAnalytics library
Return.calculate(method = 'discrete') |>
na.omit()
monthly_adjusted_returns
#Creates a portfolio object using portfolio.spec function, which is a function from of PortfolioAnalytics
# returns a list.
Minimum_Variance_Portfolio <- portfolio.spec(assets = symbols)
Minimum_Variance_Portfolio
# Add Full Investment Constraint (weight sum constraint - weights must sum to 1)
Minimum_Variance_Portfolio <- add.constraint(
portfolio = Minimum_Variance_Portfolio,
type = 'full_investment'
)
Minimum_Variance_Portfolio
# Add Box Constraint(weights have minimum and maximum values)
Minimum_Variance_Portfolio <- add.constraint(
portfolio = Minimum_Variance_Portfolio,
type = 'box',
min = 0.05,
max = .6
)
Minimum_Variance_Portfolio
# Add Objective to minimize risk (we are creating a minimization portfolio)
Minimum_Variance_Portfolio <- add.objective(
portfolio = Minimum_Variance_Portfolio,
type = 'risk',
name = 'var'
)
Minimum_Variance_Portfolio
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'ROI',
solver = 'quadprog',
trace = TRUE
)
Main_Variance_Portfolio
Main_Variance_Portfolio$weights
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'quadprog',
trace = TRUE
)
Main_Variance_Portfolio
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'ROI',
solver = 'quadprog',
trace = TRUE
)
Main_Variance_Portfolio
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'ROI',
solver = 'quadprog',
trace = TRUE
)
Main_Variance_Portfolio
Main_Variance_Portfolio <- optimize.portfolio(
R = monthly_adjusted_returns,
portfolio = Minimum_Variance_Portfolio,
optimize_method = 'quadprog',
trace = TRUE
)
Main_Variance_Portfolio
shiny::runApp('NSS_projects/Portfolio_Optimization/Portfolio Optimization')
shiny::runApp()
# install.packages("ROI")
# install.packages("ROI.plugin.quadprog")
# install.packages("Rglpk")
# install.packages("ROI.plugin.Rglpk")
# install.packages('webshot')
# install.packages('highcharter')
# install.packages('widgetframe')
#install.packages("quadprog")
#install.packages("shinydashboard")
library(Rglpk)
library(ROI.plugin.glpk)
library(ROI)
library(ROI.plugin.quadprog)
library(tidyverse)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(timetk)
library(tibbletime)
library(xts)
library(zoo)
library(tidyquant)
library(glue)
library(quadprog)
library(rlang)
library(webshot)
library(knitr)
library(purrr)
library(highcharter)
library(widgetframe)
symbols <- c('IXC', 'IXG', 'IXN', 'IXJ', 'IXP','RXI','EXI','MXI','KXI','JXI')
#I'm using getSymbols from quantmod library because it returns a time series object in xts form.
prices <- getSymbols(
Symbols = symbols,
src = 'yahoo',
auto.assign = TRUE,
warnings = FALSE
) |>
# get() unpacks our financial price data (Open, High, Low, Close, Volume, Adjusted). Ad returns ONLY the daily adjusted price (accounts for any dividends paid, corporate actions, or adjustments that would effect the price of the stock. Map returns each individual stock data into a list.
map(.f = ~Ad(get(x = .))) |>
#reduce applies a function to each element of the list?
reduce(.f = merge) |>
# I needed to set the ticker symbol to the name of the columns. I found this nifty way of doing it since colnames(x=prices) <- value didn't work and I don't know why. Apparently this is prefix form. (Ex. AAPL.Adjusted is now AAPL)
`colnames<-` (value=symbols)
prices
monthly_adjusted_log_returns <- to.monthly(
x = prices,
drop.time = TRUE,
indexAt  = 'lastof',
OHLC = FALSE
) |>
#compute our log returns
Return.calculate(
method = 'log') |>
na.omit()
monthly_adjusted_log_returns
#line charts of monthly log returns
highchart(type = 'stock') |>
#   # Add chart main title
hc_title(text = "Monthly Log Returns") |>
hc_add_series(
data = monthly_adjusted_log_returns[ , symbols[[1]]],
name = symbols[[1]]
) |>
hc_add_series(
data = monthly_adjusted_log_returns[, symbols[[4]]],
name = symbols[[4]]
) |>
hc_add_series(
data = monthly_adjusted_log_returns[, symbols[[3]]],
name = symbols[[3]]
) |>
hc_add_theme(hc_thm = hc_theme_economist()) |>
hc_exporting(enabled = TRUE) |>
hc_legend(enabled = TRUE)
monthly_adjusted_log_returns_tibble <- monthly_adjusted_log_returns |>
tk_tbl() |>
rename(date = index) |>
pivot_longer(
-date,
names_to = 'Asset',
values_to = 'Log_Returns'
)
monthly_adjusted_log_returns_tibble
ggplot(
monthly_adjusted_log_returns_tibble, mapping = aes(x=Log_Returns) +
geom_histogram(
alpha = 0.5,
mapping = aes(fill= Asset)
) +
ggtitle("Distributions of Monthly Log")
)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
